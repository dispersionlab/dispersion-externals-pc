/*** colorchanging text-toggle** arguments: *		text_on*		text_off *		brgb[r, g, b] *             	frgb[r, g, b] * 		font*		fontsize *		brgb2[r, g, b]*		frgb2[r, g, b]**/autowatch = 1;outlets = 2;sketch.default2d();var tt_brgb = [0.94902, 0.94902, 0.870588];var tt_frgb = [0.25, 0.25, 0.25, 0.25];var tt_brgb2 = [0.909804, 0.909804, 0.831373];var tt_frgb2 = [0.453125, 0.453125, 0.453125];var tt_texton = "on";var tt_textoff = "off";var tt_fontsize = 0.6; var tt_font = "geneva"; var tt_val = 0;// process argumentsif (jsarguments.length>1)	tt_texton = jsarguments[2];if (jsarguments.length>2)	tt_textoff = jsarguments[1];if (jsarguments.length>3)	tt_brgb[0] = jsarguments[3]/255.;if (jsarguments.length>4)	tt_brgb[1] = jsarguments[4]/255.;if (jsarguments.length>5)	tt_brgb[2] = jsarguments[5]/255.;if (jsarguments.length>6)	tt_frgb[0] = jsarguments[6]/255.;if (jsarguments.length>7)	tt_frgb[1] = jsarguments[7]/255.;if (jsarguments.length>8)	tt_frgb[2] = jsarguments[8]/255.;	if (jsarguments.length>9)	tt_font = jsarguments[9];if (jsarguments.length>10)	tt_fontsize = jsarguments[10];	if (jsarguments.length>11)	tt_brgb2[0] = jsarguments[11]/255.;if (jsarguments.length>12)	tt_brgb2[1] = jsarguments[12]/255.;if (jsarguments.length>13)	tt_brgb2[2] = jsarguments[13]/255.;if (jsarguments.length>14)	tt_frgb2[0] = jsarguments[14]/255.;if (jsarguments.length>15)	tt_frgb2[1] = jsarguments[15]/255.;if (jsarguments.length>16)	tt_frgb2[2] = jsarguments[16]/255.;draw();refresh();function draw(){	var str;	with (sketch) {		fontsize(tt_fontsize*(box.rect[3]-box.rect[1]));		font(tt_font);				if (tt_val == 1){			glclearcolor(tt_brgb2);			glclear();			glcolor(tt_frgb2);			textalign("center","center");					moveto(0,0)			text(tt_texton);		}else if(tt_val == 0){			glclearcolor(tt_brgb);			glclear();			glcolor(tt_frgb);			textalign("center","center");					moveto(0,0)			text(tt_textoff);		}	}}function msg_int(v){	if (v==0)		tt_val = 0;	else		tt_val = 1;	draw();	refresh();	if (tt_val){		 outlet(1,tt_texton);	}else{		outlet(1,tt_textoff);	}	outlet(0,tt_val);	}function set(v){	if (v==0)		tt_val = 0;	else		tt_val = 1;	draw();	refresh();}function bang(){	tt_val = 1 - tt_val; // toggle 0/1	msg_int(tt_val);}function setvalueof(v){	msg_int(v);}function getvalueof(){	return tt_val;}function texton(v){	tt_texton = v.toString();	draw();	refresh();}function textoff(v){	tt_textoff = v.toString();	draw();	refresh();}function fontsize(v){	tt_fontsize = v;	draw();	refresh();}function font(v){	tt_font = v;	draw();	refresh();}function frgb(r,g,b){	tt_frgb[0] = r/255.;	tt_frgb[1] = g/255.;	tt_frgb[2] = b/255.;	draw();	refresh();}function brgb(r,g,b){	tt_brgb[0] = r/255.;	tt_brgb[1] = g/255.;	tt_brgb[2] = b/255.;	draw();	refresh();}function frgb2(r,g,b){	tt_frgb2[0] = r/255.;	tt_frgb2[1] = g/255.;	tt_frgb2[2] = b/255.;	draw();	refresh();}function brgb2(r,g,b){	tt_brgb2[0] = r/255.;	tt_brgb2[1] = g/255.;	tt_brgb2[2] = b/255.;	draw();	refresh();}function fsaa(v){	sketch.fsaa = v;	draw();	refresh();}function onresize(w,h){	draw();	refresh();}onresize.local = 1; //private// not using any mouse argsfunction onclick(){	bang();}onclick.local = 1; //privatefunction ondblclick(){	onclick();}ondblclick.local = 1; //private